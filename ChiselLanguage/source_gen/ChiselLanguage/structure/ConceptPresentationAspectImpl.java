package ChiselLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ArithExp;
  private ConceptPresentation props_BinaryExp;
  private ConceptPresentation props_Computation;
  private ConceptPresentation props_Exp;
  private ConceptPresentation props_Input;
  private ConceptPresentation props_Integer;
  private ConceptPresentation props_Party;
  private ConceptPresentation props_PartyDeclaration;
  private ConceptPresentation props_PartyRef;
  private ConceptPresentation props_Protocol;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ArithExp:
        if (props_ArithExp == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ArithExp");
          props_ArithExp = cpb.create();
        }
        return props_ArithExp;
      case LanguageConceptSwitch.BinaryExp:
        if (props_BinaryExp == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BinaryExp");
          props_BinaryExp = cpb.create();
        }
        return props_BinaryExp;
      case LanguageConceptSwitch.Computation:
        if (props_Computation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Computation");
          props_Computation = cpb.create();
        }
        return props_Computation;
      case LanguageConceptSwitch.Exp:
        if (props_Exp == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Exp");
          props_Exp = cpb.create();
        }
        return props_Exp;
      case LanguageConceptSwitch.Input:
        if (props_Input == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Input");
          props_Input = cpb.create();
        }
        return props_Input;
      case LanguageConceptSwitch.Integer:
        if (props_Integer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Integer");
          props_Integer = cpb.create();
        }
        return props_Integer;
      case LanguageConceptSwitch.Party:
        if (props_Party == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Party");
          props_Party = cpb.create();
        }
        return props_Party;
      case LanguageConceptSwitch.PartyDeclaration:
        if (props_PartyDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PartyDeclaration = cpb.create();
        }
        return props_PartyDeclaration;
      case LanguageConceptSwitch.PartyRef:
        if (props_PartyRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bd1e1fbL, 0x34ac754e3bd1e1fcL, "ref", "", "");
          props_PartyRef = cpb.create();
        }
        return props_PartyRef;
      case LanguageConceptSwitch.Protocol:
        if (props_Protocol == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Protocol = cpb.create();
        }
        return props_Protocol;
    }
    return null;
  }
}
