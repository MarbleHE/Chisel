package ChiselLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptArithExp = createDescriptorForArithExp();
  /*package*/ final ConceptDescriptor myConceptBinaryExp = createDescriptorForBinaryExp();
  /*package*/ final ConceptDescriptor myConceptComputation = createDescriptorForComputation();
  /*package*/ final ConceptDescriptor myConceptExp = createDescriptorForExp();
  /*package*/ final ConceptDescriptor myConceptInput = createDescriptorForInput();
  /*package*/ final ConceptDescriptor myConceptInteger = createDescriptorForInteger();
  /*package*/ final ConceptDescriptor myConceptParty = createDescriptorForParty();
  /*package*/ final ConceptDescriptor myConceptPartyDeclaration = createDescriptorForPartyDeclaration();
  /*package*/ final ConceptDescriptor myConceptPartyRef = createDescriptorForPartyRef();
  /*package*/ final ConceptDescriptor myConceptProtocol = createDescriptorForProtocol();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptArithExp, myConceptBinaryExp, myConceptComputation, myConceptExp, myConceptInput, myConceptInteger, myConceptParty, myConceptPartyDeclaration, myConceptPartyRef, myConceptProtocol);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.ArithExp:
        return myConceptArithExp;
      case LanguageConceptSwitch.BinaryExp:
        return myConceptBinaryExp;
      case LanguageConceptSwitch.Computation:
        return myConceptComputation;
      case LanguageConceptSwitch.Exp:
        return myConceptExp;
      case LanguageConceptSwitch.Input:
        return myConceptInput;
      case LanguageConceptSwitch.Integer:
        return myConceptInteger;
      case LanguageConceptSwitch.Party:
        return myConceptParty;
      case LanguageConceptSwitch.PartyDeclaration:
        return myConceptPartyDeclaration;
      case LanguageConceptSwitch.PartyRef:
        return myConceptPartyRef;
      case LanguageConceptSwitch.Protocol:
        return myConceptProtocol;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList();
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForArithExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ChiselLanguage", "ArithExp", 0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bcd1c7eL);
    b.class_(false, false, false);
    b.super_("ChiselLanguage.structure.BinaryExp", 0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bcd1c93L);
    b.origin("r:4e4219f3-ce2b-4ec1-976b-9d95c787f25b(ChiselLanguage.structure)/3795537564837682302");
    b.version(2);
    b.property("operator", 0x34ac754e3bcd1c7fL).type(PrimitiveTypeId.STRING).origin("3795537564837682303").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ChiselLanguage", "BinaryExp", 0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bcd1c93L);
    b.class_(false, false, false);
    b.super_("ChiselLanguage.structure.Exp", 0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bcdee53L);
    b.origin("r:4e4219f3-ce2b-4ec1-976b-9d95c787f25b(ChiselLanguage.structure)/3795537564837682323");
    b.version(2);
    b.aggregate("left", 0x34ac754e3bcd1c94L).target(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bd1e1fbL).optional(false).ordered(true).multiple(false).origin("3795537564837682324").done();
    b.aggregate("right", 0x34ac754e3bcd1c96L).target(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bd1e1fbL).optional(false).ordered(true).multiple(false).origin("3795537564837682326").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForComputation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ChiselLanguage", "Computation", 0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bc814b2L);
    b.class_(false, false, false);
    b.origin("r:4e4219f3-ce2b-4ec1-976b-9d95c787f25b(ChiselLanguage.structure)/3795537564837352626");
    b.version(2);
    b.aggregate("computation", 0x34ac754e3bd06449L).target(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bcd1c7eL).optional(false).ordered(true).multiple(false).origin("3795537564837897289").done();
    b.aggregate("parties", 0x34ac754e3bd4c07fL).target(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bd1e1fbL).optional(false).ordered(true).multiple(true).origin("3795537564838183039").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ChiselLanguage", "Exp", 0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bcdee53L);
    b.class_(false, false, false);
    b.origin("r:4e4219f3-ce2b-4ec1-976b-9d95c787f25b(ChiselLanguage.structure)/3795537564837736019");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInput() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ChiselLanguage", "Input", 0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bc78ef1L);
    b.class_(false, false, false);
    b.origin("r:4e4219f3-ce2b-4ec1-976b-9d95c787f25b(ChiselLanguage.structure)/3795537564837318385");
    b.version(2);
    b.aggregate("values", 0x34ac754e3bca1db7L).target(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bca41cfL).optional(false).ordered(true).multiple(true).origin("3795537564837486007").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInteger() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ChiselLanguage", "Integer", 0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bca41cfL);
    b.class_(false, false, false);
    b.super_("ChiselLanguage.structure.Exp", 0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bcdee53L);
    b.origin("r:4e4219f3-ce2b-4ec1-976b-9d95c787f25b(ChiselLanguage.structure)/3795537564837495247");
    b.version(2);
    b.property("value", 0x34ac754e3bca41d0L).type(PrimitiveTypeId.INTEGER).origin("3795537564837495248").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParty() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ChiselLanguage", "Party", 0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bc78ee1L);
    b.class_(false, false, false);
    b.origin("r:4e4219f3-ce2b-4ec1-976b-9d95c787f25b(ChiselLanguage.structure)/3795537564837318369");
    b.version(2);
    b.aggregate("input", 0x34ac754e3bc814adL).target(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bc78ef1L).optional(true).ordered(true).multiple(false).origin("3795537564837352621").done();
    b.aggregate("trusts", 0x34ac754e3bdfddefL).target(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bd1e1fbL).optional(true).ordered(true).multiple(true).origin("3795537564838911471").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPartyDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ChiselLanguage", "PartyDeclaration", 0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bd30f19L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:4e4219f3-ce2b-4ec1-976b-9d95c787f25b(ChiselLanguage.structure)/3795537564838072089");
    b.version(2);
    b.aggregate("initializer", 0x34ac754e3bd30f1cL).target(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bc78ee1L).optional(false).ordered(true).multiple(false).origin("3795537564838072092").done();
    b.alias("party");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPartyRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ChiselLanguage", "PartyRef", 0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bd1e1fbL);
    b.class_(false, false, false);
    b.super_("ChiselLanguage.structure.Exp", 0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bcdee53L);
    b.origin("r:4e4219f3-ce2b-4ec1-976b-9d95c787f25b(ChiselLanguage.structure)/3795537564837995003");
    b.version(2);
    b.associate("ref", 0x34ac754e3bd1e1fcL).target(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bd30f19L).optional(false).origin("3795537564837995004").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForProtocol() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ChiselLanguage", "Protocol", 0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bc814b3L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:4e4219f3-ce2b-4ec1-976b-9d95c787f25b(ChiselLanguage.structure)/3795537564837352627");
    b.version(2);
    b.aggregate("parties", 0x34ac754e3bd1e207L).target(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bd30f19L).optional(false).ordered(true).multiple(true).origin("3795537564837995015").done();
    b.aggregate("computations", 0x34ac754e3bc814b6L).target(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bc814b2L).optional(false).ordered(true).multiple(true).origin("3795537564837352630").done();
    return b.create();
  }
}
