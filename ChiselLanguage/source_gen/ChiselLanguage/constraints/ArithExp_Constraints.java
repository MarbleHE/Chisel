package ChiselLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ArithExp_Constraints extends BaseConstraintsDescriptor {
  public ArithExp_Constraints() {
    super(CONCEPTS.ArithExp$U);
  }

  public static class Operator_Property extends BasePropertyConstraintsDescriptor {
    public Operator_Property(ConstraintsDescriptor container) {
      super(PROPS.operator$Lx30, container);
    }
    @Override
    public boolean hasOwnValidator() {
      return true;
    }
    private static final SNodePointer validatePropertyBreakingPoint = new SNodePointer("r:de7ac0f2-ba6a-46bf-8db2-ace9e0a97c24(ChiselLanguage.constraints)", "2073504467208672627");
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castString(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(validatePropertyBreakingPoint);
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, String propertyValue) {
      return propertyValue.length() == 1 && ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<String>(), "+", "-", "*", "/")).contains(propertyValue);
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.operator$Lx30, new Operator_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ArithExp$U = MetaAdapterFactory.getConcept(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bcd1c7eL, "ChiselLanguage.structure.ArithExp");
  }

  private static final class PROPS {
    /*package*/ static final SProperty operator$Lx30 = MetaAdapterFactory.getProperty(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bcd1c7eL, 0x34ac754e3bcd1c7fL, "operator");
  }
}
