package ChiselLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.core.aspects.constraints.rules.BaseRulesConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.constraints.rules.Rule;
import jetbrains.mps.core.aspects.constraints.rules.kinds.ContainmentContext;
import java.util.List;
import java.util.Collections;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.core.aspects.constraints.rules.BaseRule;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.core.aspects.constraints.rules.RuleId;
import jetbrains.mps.core.aspects.constraints.rules.kinds.PredefinedRuleKinds;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Computation_ConstraintRules extends BaseRulesConstraintsDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bc814b2L, "ChiselLanguage.structure.Computation");

  public static final Rule<ContainmentContext> check_id3795537564839612420 = new Rule_computationIsTrusted();

  private static final List<Rule<?>> RULES = Collections.unmodifiableList(Arrays.<Rule<?>>asList(check_id3795537564839612420));

  @NotNull
  @Override
  public List<Rule<?>> getDeclaredRules() {
    return RULES;
  }

  public static final class Rule_computationIsTrusted extends BaseRule<ContainmentContext> {
    private static final SNodeReference SOURCE_NODE_REF = PersistenceFacade.getInstance().createNodeReference("r:de7ac0f2-ba6a-46bf-8db2-ace9e0a97c24(ChiselLanguage.constraints)/3795537564839612420");
    public static final RuleId ID_computationIsTrusted = new RuleId(3795537564839612420L, SOURCE_NODE_REF);

    public Rule_computationIsTrusted() {
      super(CONCEPT, PredefinedRuleKinds.CAN_BE_PARENT, ID_computationIsTrusted, SOURCE_NODE_REF);
    }

    @Override
    public boolean check(@NotNull ContainmentContext context) {
      return ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<String>(), SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(context.getParentNode(), LINKS.computation$hbFI), LINKS.left$Lxyw), LINKS.ref$x7vw), PROPS.name$tAp1))).addSequence(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(context.getParentNode(), LINKS.computation$hbFI), LINKS.left$Lxyw), LINKS.ref$x7vw), LINKS.initializer$9GJ9), LINKS.trusts$R0q7)).select(new ISelector<SNode, String>() {
        public String select(SNode it) {
          return SPropertyOperations.getString(SLinkOperations.getTarget(it, LINKS.ref$x7vw), PROPS.name$tAp1);
        }
      })).containsSequence(Sequence.fromIterable(SLinkOperations.collect(SLinkOperations.getChildren(context.getParentNode(), LINKS.parties$V1rw), LINKS.ref$x7vw)).select(new ISelector<SNode, String>() {
        public String select(SNode it) {
          return SPropertyOperations.getString(it, PROPS.name$tAp1);
        }
      })) && ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<String>(), SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(context.getParentNode(), LINKS.computation$hbFI), LINKS.right$Lxzu), LINKS.ref$x7vw), PROPS.name$tAp1))).addSequence(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(context.getParentNode(), LINKS.computation$hbFI), LINKS.right$Lxzu), LINKS.ref$x7vw), LINKS.initializer$9GJ9), LINKS.trusts$R0q7)).select(new ISelector<SNode, String>() {
        public String select(SNode it) {
          return SPropertyOperations.getString(SLinkOperations.getTarget(it, LINKS.ref$x7vw), PROPS.name$tAp1);
        }
      })).containsSequence(Sequence.fromIterable(SLinkOperations.collect(SLinkOperations.getChildren(context.getParentNode(), LINKS.parties$V1rw), LINKS.ref$x7vw)).select(new ISelector<SNode, String>() {
        public String select(SNode it) {
          return SPropertyOperations.getString(it, PROPS.name$tAp1);
        }
      }));
    }

    @Override
    public boolean appliesTo(@NotNull ContainmentContext context) {
      return true;
    }
  }

  /*package*/ Computation_ConstraintRules() {
    super(CONCEPT);
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink computation$hbFI = MetaAdapterFactory.getContainmentLink(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bc814b2L, 0x34ac754e3bd06449L, "computation");
    /*package*/ static final SContainmentLink left$Lxyw = MetaAdapterFactory.getContainmentLink(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bcd1c93L, 0x34ac754e3bcd1c94L, "left");
    /*package*/ static final SReferenceLink ref$x7vw = MetaAdapterFactory.getReferenceLink(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bd1e1fbL, 0x34ac754e3bd1e1fcL, "ref");
    /*package*/ static final SContainmentLink initializer$9GJ9 = MetaAdapterFactory.getContainmentLink(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bd30f19L, 0x34ac754e3bd30f1cL, "initializer");
    /*package*/ static final SContainmentLink trusts$R0q7 = MetaAdapterFactory.getContainmentLink(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bc78ee1L, 0x34ac754e3bdfddefL, "trusts");
    /*package*/ static final SContainmentLink parties$V1rw = MetaAdapterFactory.getContainmentLink(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bc814b2L, 0x34ac754e3bd4c07fL, "parties");
    /*package*/ static final SContainmentLink right$Lxzu = MetaAdapterFactory.getContainmentLink(0x834a4f2193844439L, 0xa5bea9f2ef9bfdf9L, 0x34ac754e3bcd1c93L, 0x34ac754e3bcd1c96L, "right");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
